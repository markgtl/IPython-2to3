import io
import unittest
from unittest import mock
import sys

sys.path.append('.', '..')
from .. import ipy2to3
import test_stubs

executable = '../ipy2to3.py'

class UnitTestIpy2to3(unittest.TestCase):
    @mock.patch.object(ipy2to3, 'convert_a_worksheet_ipy2to3')
    def test_convert_ipy2to3_v3(self, mock_convert_a_worksheet_ipy2to3: unittest.mock.Mock):
        ipy2to3.convert_ipy2to3(test_stubs.notebook_v3)
        self.assertTrue(mock_convert_a_worksheet_ipy2to3.called)
        self.assertEqual(mock_convert_a_worksheet_ipy2to3.call_args_list[0][0][1], "v3")
        self.assertEqual(mock_convert_a_worksheet_ipy2to3.call_args_list.__len__(), 2)
        self.assertEqual(mock_convert_a_worksheet_ipy2to3.call_args_list[1][0][1], "v3")

    @mock.patch.object(ipy2to3, 'convert_a_worksheet_ipy2to3')
    def test_convert_ipy2to3_v4(self, mock_convert_a_worksheet_ipy2to3: unittest.mock.Mock):
        ipy2to3.convert_ipy2to3(test_stubs.notebook_v4)
        self.assertTrue(mock_convert_a_worksheet_ipy2to3.called)
        self.assertEqual(mock_convert_a_worksheet_ipy2to3.call_args_list[0][0][1], "v4")
        self.assertEqual(mock_convert_a_worksheet_ipy2to3.call_args_list.__len__(), 1)

    def test_is_python_code_cell_v3(self):
        self.assertTrue(ipy2to3.is_python_code_cell_v4(test_stubs.code_cell_v3))

    def test_is_python_code_cell_v4(self):
        self.assertTrue(ipy2to3.is_python_code_cell_v4(test_stubs.code_cell_v4))

    def test_is_magic(self):
        self.assertTrue(ipy2to3.is_magic("%lsmagic"))
        self.assertFalse(ipy2to3.is_magic(r' print "%lsmagic"'))

    def test_is_magic(self):
        self.assertTrue(ipy2to3.is_magic("%lsmagic"))
        self.assertFalse(ipy2to3.is_magic(r' print "%lsmagic"'))

    def test_replace_magic_lines(self):
        lines_to_replace = ["%lsmagic\n", 'print "test"\n']
        found_magics = ipy2to3.replace_magic_lines(lines_to_replace)
        self.assertEqual(lines_to_replace, ["\n", 'print "test"\n'])
        self.assertEqual(found_magics, [(0, "%lsmagic\n")])

    def test_convert_a_cell_ipy2to3_v3(self):
        import copy
        cell = copy.deepcopy(test_stubs.code_cell_v3)
        errors = ipy2to3.convert_a_cell_ipy2to3(cell, "v3")
        self.assertEqual(errors, "")
        self.assertEqual(cell['input'], ['print("line1")\n', 'print("line2")\n'])

    def test_convert_a_cell_ipy2to3_v4(self):
        import copy
        cell = copy.deepcopy(test_stubs.code_cell_v4)
        errors = ipy2to3.convert_a_cell_ipy2to3(cell, "v4")
        self.assertEqual(errors, "")
        self.assertEqual(cell['source'], ['print("line1")\n', 'print("line2")\n'])

    @mock.patch.object(ipy2to3, 'convert_ipy2to3')
    def test_main(self, mock_convert_ipy2to3: mock.Mock):
        mock_convert_ipy2to3.return_value = ''
        open_ = mock.mock_open(read_data=test_stubs.str_notebook_v3)

        with mock.patch('io.open', open_):
            with unittest.mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
                status = ipy2to3.main([executable, "test-format-v3.ipynb", "test-format-v3-result.ipynb"])
                out = str(mock_stdout.getvalue()).replace('\r', '')

        self.assertEqual(status, 0)
        self.assertEqual(out, '')
        self.assertTrue(mock_convert_ipy2to3.called)
        self.assertEqual(open_.call_count, 2)

        # should show an error
        mock_convert_ipy2to3.return_value = 'error converting cell, cell left unconverted: \n\nrun github_datapull.py;'
        open_ = mock.mock_open(read_data=test_stubs.str_notebook_v3)
        with mock.patch('io.open', open_):
            with unittest.mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
                status = ipy2to3.main([exectuable, "test-format-v3.ipynb", "test-format-v3-result.ipynb"])
                out = str(mock_stdout.getvalue()).replace('\r', '')

        self.assertEqual(status, 0)
        self.assertEqual(out, 'error converting cell, cell left unconverted: \n\nrun github_datapull.py;\n')
        self.assertTrue(mock_convert_ipy2to3.called)
        self.assertEqual(open_.call_count, 2)

        # should not save
        mock_convert_ipy2to3.return_value = 'notebook-format-error: error'
        open_ = mock.mock_open(read_data=test_stubs.str_notebook_v3)
        with mock.patch('io.open', open_):
            with unittest.mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
                status = ipy2to3.main([executable, "test-format-v3.ipynb", "test-format-v3-result.ipynb"])
                out = str(mock_stdout.getvalue()).replace('\r', '')

        self.assertEqual(status, 1)
        self.assertEqual(out, 'notebook-format-error: error\n')
        self.assertTrue(mock_convert_ipy2to3.called)
        self.assertEqual(open_.call_count, 1)

    def test_usage(self):
        # no arguments
        with unittest.mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
            status = ipy2to3.main([executable])
            out = str(mock_stdout.getvalue()).replace('\r', '')
        self.assertEqual(status, 1)
        self.assertTrue('Usage' in out)

        # one argument
        with unittest.mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
            status = ipy2to3.main([executable])
            out = str(mock_stdout.getvalue()).replace('\r', '')
        self.assertEqual(status, 1)
        self.assertTrue('Usage' in out)

    def test_format_err(self):
        with unittest.mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
            status = ipy2to3.main([executable, "test-format-err.ipynb", "test-format-err-result.ipynb"])
            out = str(mock_stdout.getvalue()).replace('\r', '')
        self.assertEqual(status, 1)
        self.assertTrue('error' in out)

    def test_format_v3(self):
        with unittest.mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
            status = ipy2to3.main([executable, "test-format-v3.ipynb", "test-format-v3-result.ipynb"])
            out = str(mock_stdout.getvalue()).replace('\r', '')
        self.assertEqual(status, 0)
        self.assertEqual(out, 'error converting cell, cell left unconverted: \nrun github_datapull.py;\n')

    def test_format_v4(self):
        with unittest.mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
            status = ipy2to3.main([executable, "test-format-v4.ipynb", "test-format-v4-result.ipynb"])
            out = str(mock_stdout.getvalue()).replace('\r', '')
        self.assertEqual(status, 0)
        self.assertEqual(out, '')


if __name__ == '__main__':
    unittest.main()
